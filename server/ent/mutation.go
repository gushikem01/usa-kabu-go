// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/gushikem01/usa-kabu-go/server/ent/predicate"
	"github.com/gushikem01/usa-kabu-go/server/ent/stocks"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStocks = "Stocks"
)

// StocksMutation represents an operation that mutates the Stocks nodes in the graph.
type StocksMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	symbol              *string
	name                *string
	name_ja             *string
	_type               *string
	exchange            *string
	exchange_short_name *string
	price               *float64
	addprice            *float64
	industry            *string
	market_carp         *float64
	addmarket_carp      *float64
	last_div            *int
	addlast_div         *int
	description         *float64
	adddescription      *float64
	yield               *float64
	addyield            *float64
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	stocks              map[int]struct{}
	removedstocks       map[int]struct{}
	clearedstocks       bool
	done                bool
	oldValue            func(context.Context) (*Stocks, error)
	predicates          []predicate.Stocks
}

var _ ent.Mutation = (*StocksMutation)(nil)

// stocksOption allows management of the mutation configuration using functional options.
type stocksOption func(*StocksMutation)

// newStocksMutation creates new mutation for the Stocks entity.
func newStocksMutation(c config, op Op, opts ...stocksOption) *StocksMutation {
	m := &StocksMutation{
		config:        c,
		op:            op,
		typ:           TypeStocks,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStocksID sets the ID field of the mutation.
func withStocksID(id int) stocksOption {
	return func(m *StocksMutation) {
		var (
			err   error
			once  sync.Once
			value *Stocks
		)
		m.oldValue = func(ctx context.Context) (*Stocks, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stocks.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStocks sets the old Stocks of the mutation.
func withStocks(node *Stocks) stocksOption {
	return func(m *StocksMutation) {
		m.oldValue = func(context.Context) (*Stocks, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StocksMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StocksMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StocksMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StocksMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stocks.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSymbol sets the "symbol" field.
func (m *StocksMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *StocksMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ClearSymbol clears the value of the "symbol" field.
func (m *StocksMutation) ClearSymbol() {
	m.symbol = nil
	m.clearedFields[stocks.FieldSymbol] = struct{}{}
}

// SymbolCleared returns if the "symbol" field was cleared in this mutation.
func (m *StocksMutation) SymbolCleared() bool {
	_, ok := m.clearedFields[stocks.FieldSymbol]
	return ok
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *StocksMutation) ResetSymbol() {
	m.symbol = nil
	delete(m.clearedFields, stocks.FieldSymbol)
}

// SetName sets the "name" field.
func (m *StocksMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StocksMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *StocksMutation) ClearName() {
	m.name = nil
	m.clearedFields[stocks.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *StocksMutation) NameCleared() bool {
	_, ok := m.clearedFields[stocks.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *StocksMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, stocks.FieldName)
}

// SetNameJa sets the "name_ja" field.
func (m *StocksMutation) SetNameJa(s string) {
	m.name_ja = &s
}

// NameJa returns the value of the "name_ja" field in the mutation.
func (m *StocksMutation) NameJa() (r string, exists bool) {
	v := m.name_ja
	if v == nil {
		return
	}
	return *v, true
}

// OldNameJa returns the old "name_ja" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldNameJa(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameJa is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameJa requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameJa: %w", err)
	}
	return oldValue.NameJa, nil
}

// ClearNameJa clears the value of the "name_ja" field.
func (m *StocksMutation) ClearNameJa() {
	m.name_ja = nil
	m.clearedFields[stocks.FieldNameJa] = struct{}{}
}

// NameJaCleared returns if the "name_ja" field was cleared in this mutation.
func (m *StocksMutation) NameJaCleared() bool {
	_, ok := m.clearedFields[stocks.FieldNameJa]
	return ok
}

// ResetNameJa resets all changes to the "name_ja" field.
func (m *StocksMutation) ResetNameJa() {
	m.name_ja = nil
	delete(m.clearedFields, stocks.FieldNameJa)
}

// SetType sets the "type" field.
func (m *StocksMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *StocksMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *StocksMutation) ClearType() {
	m._type = nil
	m.clearedFields[stocks.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *StocksMutation) TypeCleared() bool {
	_, ok := m.clearedFields[stocks.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *StocksMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, stocks.FieldType)
}

// SetExchange sets the "exchange" field.
func (m *StocksMutation) SetExchange(s string) {
	m.exchange = &s
}

// Exchange returns the value of the "exchange" field in the mutation.
func (m *StocksMutation) Exchange() (r string, exists bool) {
	v := m.exchange
	if v == nil {
		return
	}
	return *v, true
}

// OldExchange returns the old "exchange" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldExchange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchange: %w", err)
	}
	return oldValue.Exchange, nil
}

// ClearExchange clears the value of the "exchange" field.
func (m *StocksMutation) ClearExchange() {
	m.exchange = nil
	m.clearedFields[stocks.FieldExchange] = struct{}{}
}

// ExchangeCleared returns if the "exchange" field was cleared in this mutation.
func (m *StocksMutation) ExchangeCleared() bool {
	_, ok := m.clearedFields[stocks.FieldExchange]
	return ok
}

// ResetExchange resets all changes to the "exchange" field.
func (m *StocksMutation) ResetExchange() {
	m.exchange = nil
	delete(m.clearedFields, stocks.FieldExchange)
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (m *StocksMutation) SetExchangeShortName(s string) {
	m.exchange_short_name = &s
}

// ExchangeShortName returns the value of the "exchange_short_name" field in the mutation.
func (m *StocksMutation) ExchangeShortName() (r string, exists bool) {
	v := m.exchange_short_name
	if v == nil {
		return
	}
	return *v, true
}

// OldExchangeShortName returns the old "exchange_short_name" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldExchangeShortName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchangeShortName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchangeShortName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchangeShortName: %w", err)
	}
	return oldValue.ExchangeShortName, nil
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (m *StocksMutation) ClearExchangeShortName() {
	m.exchange_short_name = nil
	m.clearedFields[stocks.FieldExchangeShortName] = struct{}{}
}

// ExchangeShortNameCleared returns if the "exchange_short_name" field was cleared in this mutation.
func (m *StocksMutation) ExchangeShortNameCleared() bool {
	_, ok := m.clearedFields[stocks.FieldExchangeShortName]
	return ok
}

// ResetExchangeShortName resets all changes to the "exchange_short_name" field.
func (m *StocksMutation) ResetExchangeShortName() {
	m.exchange_short_name = nil
	delete(m.clearedFields, stocks.FieldExchangeShortName)
}

// SetPrice sets the "price" field.
func (m *StocksMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *StocksMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *StocksMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *StocksMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrice clears the value of the "price" field.
func (m *StocksMutation) ClearPrice() {
	m.price = nil
	m.addprice = nil
	m.clearedFields[stocks.FieldPrice] = struct{}{}
}

// PriceCleared returns if the "price" field was cleared in this mutation.
func (m *StocksMutation) PriceCleared() bool {
	_, ok := m.clearedFields[stocks.FieldPrice]
	return ok
}

// ResetPrice resets all changes to the "price" field.
func (m *StocksMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
	delete(m.clearedFields, stocks.FieldPrice)
}

// SetIndustry sets the "industry" field.
func (m *StocksMutation) SetIndustry(s string) {
	m.industry = &s
}

// Industry returns the value of the "industry" field in the mutation.
func (m *StocksMutation) Industry() (r string, exists bool) {
	v := m.industry
	if v == nil {
		return
	}
	return *v, true
}

// OldIndustry returns the old "industry" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldIndustry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndustry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndustry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndustry: %w", err)
	}
	return oldValue.Industry, nil
}

// ClearIndustry clears the value of the "industry" field.
func (m *StocksMutation) ClearIndustry() {
	m.industry = nil
	m.clearedFields[stocks.FieldIndustry] = struct{}{}
}

// IndustryCleared returns if the "industry" field was cleared in this mutation.
func (m *StocksMutation) IndustryCleared() bool {
	_, ok := m.clearedFields[stocks.FieldIndustry]
	return ok
}

// ResetIndustry resets all changes to the "industry" field.
func (m *StocksMutation) ResetIndustry() {
	m.industry = nil
	delete(m.clearedFields, stocks.FieldIndustry)
}

// SetMarketCarp sets the "market_carp" field.
func (m *StocksMutation) SetMarketCarp(f float64) {
	m.market_carp = &f
	m.addmarket_carp = nil
}

// MarketCarp returns the value of the "market_carp" field in the mutation.
func (m *StocksMutation) MarketCarp() (r float64, exists bool) {
	v := m.market_carp
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketCarp returns the old "market_carp" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldMarketCarp(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketCarp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketCarp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketCarp: %w", err)
	}
	return oldValue.MarketCarp, nil
}

// AddMarketCarp adds f to the "market_carp" field.
func (m *StocksMutation) AddMarketCarp(f float64) {
	if m.addmarket_carp != nil {
		*m.addmarket_carp += f
	} else {
		m.addmarket_carp = &f
	}
}

// AddedMarketCarp returns the value that was added to the "market_carp" field in this mutation.
func (m *StocksMutation) AddedMarketCarp() (r float64, exists bool) {
	v := m.addmarket_carp
	if v == nil {
		return
	}
	return *v, true
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (m *StocksMutation) ClearMarketCarp() {
	m.market_carp = nil
	m.addmarket_carp = nil
	m.clearedFields[stocks.FieldMarketCarp] = struct{}{}
}

// MarketCarpCleared returns if the "market_carp" field was cleared in this mutation.
func (m *StocksMutation) MarketCarpCleared() bool {
	_, ok := m.clearedFields[stocks.FieldMarketCarp]
	return ok
}

// ResetMarketCarp resets all changes to the "market_carp" field.
func (m *StocksMutation) ResetMarketCarp() {
	m.market_carp = nil
	m.addmarket_carp = nil
	delete(m.clearedFields, stocks.FieldMarketCarp)
}

// SetLastDiv sets the "last_div" field.
func (m *StocksMutation) SetLastDiv(i int) {
	m.last_div = &i
	m.addlast_div = nil
}

// LastDiv returns the value of the "last_div" field in the mutation.
func (m *StocksMutation) LastDiv() (r int, exists bool) {
	v := m.last_div
	if v == nil {
		return
	}
	return *v, true
}

// OldLastDiv returns the old "last_div" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldLastDiv(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastDiv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastDiv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastDiv: %w", err)
	}
	return oldValue.LastDiv, nil
}

// AddLastDiv adds i to the "last_div" field.
func (m *StocksMutation) AddLastDiv(i int) {
	if m.addlast_div != nil {
		*m.addlast_div += i
	} else {
		m.addlast_div = &i
	}
}

// AddedLastDiv returns the value that was added to the "last_div" field in this mutation.
func (m *StocksMutation) AddedLastDiv() (r int, exists bool) {
	v := m.addlast_div
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastDiv clears the value of the "last_div" field.
func (m *StocksMutation) ClearLastDiv() {
	m.last_div = nil
	m.addlast_div = nil
	m.clearedFields[stocks.FieldLastDiv] = struct{}{}
}

// LastDivCleared returns if the "last_div" field was cleared in this mutation.
func (m *StocksMutation) LastDivCleared() bool {
	_, ok := m.clearedFields[stocks.FieldLastDiv]
	return ok
}

// ResetLastDiv resets all changes to the "last_div" field.
func (m *StocksMutation) ResetLastDiv() {
	m.last_div = nil
	m.addlast_div = nil
	delete(m.clearedFields, stocks.FieldLastDiv)
}

// SetDescription sets the "description" field.
func (m *StocksMutation) SetDescription(f float64) {
	m.description = &f
	m.adddescription = nil
}

// Description returns the value of the "description" field in the mutation.
func (m *StocksMutation) Description() (r float64, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldDescription(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// AddDescription adds f to the "description" field.
func (m *StocksMutation) AddDescription(f float64) {
	if m.adddescription != nil {
		*m.adddescription += f
	} else {
		m.adddescription = &f
	}
}

// AddedDescription returns the value that was added to the "description" field in this mutation.
func (m *StocksMutation) AddedDescription() (r float64, exists bool) {
	v := m.adddescription
	if v == nil {
		return
	}
	return *v, true
}

// ClearDescription clears the value of the "description" field.
func (m *StocksMutation) ClearDescription() {
	m.description = nil
	m.adddescription = nil
	m.clearedFields[stocks.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *StocksMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[stocks.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *StocksMutation) ResetDescription() {
	m.description = nil
	m.adddescription = nil
	delete(m.clearedFields, stocks.FieldDescription)
}

// SetYield sets the "yield" field.
func (m *StocksMutation) SetYield(f float64) {
	m.yield = &f
	m.addyield = nil
}

// Yield returns the value of the "yield" field in the mutation.
func (m *StocksMutation) Yield() (r float64, exists bool) {
	v := m.yield
	if v == nil {
		return
	}
	return *v, true
}

// OldYield returns the old "yield" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldYield(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYield is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYield requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYield: %w", err)
	}
	return oldValue.Yield, nil
}

// AddYield adds f to the "yield" field.
func (m *StocksMutation) AddYield(f float64) {
	if m.addyield != nil {
		*m.addyield += f
	} else {
		m.addyield = &f
	}
}

// AddedYield returns the value that was added to the "yield" field in this mutation.
func (m *StocksMutation) AddedYield() (r float64, exists bool) {
	v := m.addyield
	if v == nil {
		return
	}
	return *v, true
}

// ClearYield clears the value of the "yield" field.
func (m *StocksMutation) ClearYield() {
	m.yield = nil
	m.addyield = nil
	m.clearedFields[stocks.FieldYield] = struct{}{}
}

// YieldCleared returns if the "yield" field was cleared in this mutation.
func (m *StocksMutation) YieldCleared() bool {
	_, ok := m.clearedFields[stocks.FieldYield]
	return ok
}

// ResetYield resets all changes to the "yield" field.
func (m *StocksMutation) ResetYield() {
	m.yield = nil
	m.addyield = nil
	delete(m.clearedFields, stocks.FieldYield)
}

// SetCreatedAt sets the "created_at" field.
func (m *StocksMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StocksMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StocksMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StocksMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StocksMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Stocks entity.
// If the Stocks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StocksMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StocksMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddStockIDs adds the "stocks" edge to the Stocks entity by ids.
func (m *StocksMutation) AddStockIDs(ids ...int) {
	if m.stocks == nil {
		m.stocks = make(map[int]struct{})
	}
	for i := range ids {
		m.stocks[ids[i]] = struct{}{}
	}
}

// ClearStocks clears the "stocks" edge to the Stocks entity.
func (m *StocksMutation) ClearStocks() {
	m.clearedstocks = true
}

// StocksCleared reports if the "stocks" edge to the Stocks entity was cleared.
func (m *StocksMutation) StocksCleared() bool {
	return m.clearedstocks
}

// RemoveStockIDs removes the "stocks" edge to the Stocks entity by IDs.
func (m *StocksMutation) RemoveStockIDs(ids ...int) {
	if m.removedstocks == nil {
		m.removedstocks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.stocks, ids[i])
		m.removedstocks[ids[i]] = struct{}{}
	}
}

// RemovedStocks returns the removed IDs of the "stocks" edge to the Stocks entity.
func (m *StocksMutation) RemovedStocksIDs() (ids []int) {
	for id := range m.removedstocks {
		ids = append(ids, id)
	}
	return
}

// StocksIDs returns the "stocks" edge IDs in the mutation.
func (m *StocksMutation) StocksIDs() (ids []int) {
	for id := range m.stocks {
		ids = append(ids, id)
	}
	return
}

// ResetStocks resets all changes to the "stocks" edge.
func (m *StocksMutation) ResetStocks() {
	m.stocks = nil
	m.clearedstocks = false
	m.removedstocks = nil
}

// Where appends a list predicates to the StocksMutation builder.
func (m *StocksMutation) Where(ps ...predicate.Stocks) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StocksMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Stocks).
func (m *StocksMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StocksMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.symbol != nil {
		fields = append(fields, stocks.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, stocks.FieldName)
	}
	if m.name_ja != nil {
		fields = append(fields, stocks.FieldNameJa)
	}
	if m._type != nil {
		fields = append(fields, stocks.FieldType)
	}
	if m.exchange != nil {
		fields = append(fields, stocks.FieldExchange)
	}
	if m.exchange_short_name != nil {
		fields = append(fields, stocks.FieldExchangeShortName)
	}
	if m.price != nil {
		fields = append(fields, stocks.FieldPrice)
	}
	if m.industry != nil {
		fields = append(fields, stocks.FieldIndustry)
	}
	if m.market_carp != nil {
		fields = append(fields, stocks.FieldMarketCarp)
	}
	if m.last_div != nil {
		fields = append(fields, stocks.FieldLastDiv)
	}
	if m.description != nil {
		fields = append(fields, stocks.FieldDescription)
	}
	if m.yield != nil {
		fields = append(fields, stocks.FieldYield)
	}
	if m.created_at != nil {
		fields = append(fields, stocks.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, stocks.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StocksMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stocks.FieldSymbol:
		return m.Symbol()
	case stocks.FieldName:
		return m.Name()
	case stocks.FieldNameJa:
		return m.NameJa()
	case stocks.FieldType:
		return m.GetType()
	case stocks.FieldExchange:
		return m.Exchange()
	case stocks.FieldExchangeShortName:
		return m.ExchangeShortName()
	case stocks.FieldPrice:
		return m.Price()
	case stocks.FieldIndustry:
		return m.Industry()
	case stocks.FieldMarketCarp:
		return m.MarketCarp()
	case stocks.FieldLastDiv:
		return m.LastDiv()
	case stocks.FieldDescription:
		return m.Description()
	case stocks.FieldYield:
		return m.Yield()
	case stocks.FieldCreatedAt:
		return m.CreatedAt()
	case stocks.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StocksMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stocks.FieldSymbol:
		return m.OldSymbol(ctx)
	case stocks.FieldName:
		return m.OldName(ctx)
	case stocks.FieldNameJa:
		return m.OldNameJa(ctx)
	case stocks.FieldType:
		return m.OldType(ctx)
	case stocks.FieldExchange:
		return m.OldExchange(ctx)
	case stocks.FieldExchangeShortName:
		return m.OldExchangeShortName(ctx)
	case stocks.FieldPrice:
		return m.OldPrice(ctx)
	case stocks.FieldIndustry:
		return m.OldIndustry(ctx)
	case stocks.FieldMarketCarp:
		return m.OldMarketCarp(ctx)
	case stocks.FieldLastDiv:
		return m.OldLastDiv(ctx)
	case stocks.FieldDescription:
		return m.OldDescription(ctx)
	case stocks.FieldYield:
		return m.OldYield(ctx)
	case stocks.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case stocks.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Stocks field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StocksMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stocks.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case stocks.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case stocks.FieldNameJa:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameJa(v)
		return nil
	case stocks.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case stocks.FieldExchange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchange(v)
		return nil
	case stocks.FieldExchangeShortName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchangeShortName(v)
		return nil
	case stocks.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case stocks.FieldIndustry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndustry(v)
		return nil
	case stocks.FieldMarketCarp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketCarp(v)
		return nil
	case stocks.FieldLastDiv:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastDiv(v)
		return nil
	case stocks.FieldDescription:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case stocks.FieldYield:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYield(v)
		return nil
	case stocks.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case stocks.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Stocks field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StocksMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, stocks.FieldPrice)
	}
	if m.addmarket_carp != nil {
		fields = append(fields, stocks.FieldMarketCarp)
	}
	if m.addlast_div != nil {
		fields = append(fields, stocks.FieldLastDiv)
	}
	if m.adddescription != nil {
		fields = append(fields, stocks.FieldDescription)
	}
	if m.addyield != nil {
		fields = append(fields, stocks.FieldYield)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StocksMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stocks.FieldPrice:
		return m.AddedPrice()
	case stocks.FieldMarketCarp:
		return m.AddedMarketCarp()
	case stocks.FieldLastDiv:
		return m.AddedLastDiv()
	case stocks.FieldDescription:
		return m.AddedDescription()
	case stocks.FieldYield:
		return m.AddedYield()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StocksMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stocks.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case stocks.FieldMarketCarp:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMarketCarp(v)
		return nil
	case stocks.FieldLastDiv:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastDiv(v)
		return nil
	case stocks.FieldDescription:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDescription(v)
		return nil
	case stocks.FieldYield:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYield(v)
		return nil
	}
	return fmt.Errorf("unknown Stocks numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StocksMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(stocks.FieldSymbol) {
		fields = append(fields, stocks.FieldSymbol)
	}
	if m.FieldCleared(stocks.FieldName) {
		fields = append(fields, stocks.FieldName)
	}
	if m.FieldCleared(stocks.FieldNameJa) {
		fields = append(fields, stocks.FieldNameJa)
	}
	if m.FieldCleared(stocks.FieldType) {
		fields = append(fields, stocks.FieldType)
	}
	if m.FieldCleared(stocks.FieldExchange) {
		fields = append(fields, stocks.FieldExchange)
	}
	if m.FieldCleared(stocks.FieldExchangeShortName) {
		fields = append(fields, stocks.FieldExchangeShortName)
	}
	if m.FieldCleared(stocks.FieldPrice) {
		fields = append(fields, stocks.FieldPrice)
	}
	if m.FieldCleared(stocks.FieldIndustry) {
		fields = append(fields, stocks.FieldIndustry)
	}
	if m.FieldCleared(stocks.FieldMarketCarp) {
		fields = append(fields, stocks.FieldMarketCarp)
	}
	if m.FieldCleared(stocks.FieldLastDiv) {
		fields = append(fields, stocks.FieldLastDiv)
	}
	if m.FieldCleared(stocks.FieldDescription) {
		fields = append(fields, stocks.FieldDescription)
	}
	if m.FieldCleared(stocks.FieldYield) {
		fields = append(fields, stocks.FieldYield)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StocksMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StocksMutation) ClearField(name string) error {
	switch name {
	case stocks.FieldSymbol:
		m.ClearSymbol()
		return nil
	case stocks.FieldName:
		m.ClearName()
		return nil
	case stocks.FieldNameJa:
		m.ClearNameJa()
		return nil
	case stocks.FieldType:
		m.ClearType()
		return nil
	case stocks.FieldExchange:
		m.ClearExchange()
		return nil
	case stocks.FieldExchangeShortName:
		m.ClearExchangeShortName()
		return nil
	case stocks.FieldPrice:
		m.ClearPrice()
		return nil
	case stocks.FieldIndustry:
		m.ClearIndustry()
		return nil
	case stocks.FieldMarketCarp:
		m.ClearMarketCarp()
		return nil
	case stocks.FieldLastDiv:
		m.ClearLastDiv()
		return nil
	case stocks.FieldDescription:
		m.ClearDescription()
		return nil
	case stocks.FieldYield:
		m.ClearYield()
		return nil
	}
	return fmt.Errorf("unknown Stocks nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StocksMutation) ResetField(name string) error {
	switch name {
	case stocks.FieldSymbol:
		m.ResetSymbol()
		return nil
	case stocks.FieldName:
		m.ResetName()
		return nil
	case stocks.FieldNameJa:
		m.ResetNameJa()
		return nil
	case stocks.FieldType:
		m.ResetType()
		return nil
	case stocks.FieldExchange:
		m.ResetExchange()
		return nil
	case stocks.FieldExchangeShortName:
		m.ResetExchangeShortName()
		return nil
	case stocks.FieldPrice:
		m.ResetPrice()
		return nil
	case stocks.FieldIndustry:
		m.ResetIndustry()
		return nil
	case stocks.FieldMarketCarp:
		m.ResetMarketCarp()
		return nil
	case stocks.FieldLastDiv:
		m.ResetLastDiv()
		return nil
	case stocks.FieldDescription:
		m.ResetDescription()
		return nil
	case stocks.FieldYield:
		m.ResetYield()
		return nil
	case stocks.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case stocks.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Stocks field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StocksMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.stocks != nil {
		edges = append(edges, stocks.EdgeStocks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StocksMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stocks.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.stocks))
		for id := range m.stocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StocksMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstocks != nil {
		edges = append(edges, stocks.EdgeStocks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StocksMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case stocks.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.removedstocks))
		for id := range m.removedstocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StocksMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstocks {
		edges = append(edges, stocks.EdgeStocks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StocksMutation) EdgeCleared(name string) bool {
	switch name {
	case stocks.EdgeStocks:
		return m.clearedstocks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StocksMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Stocks unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StocksMutation) ResetEdge(name string) error {
	switch name {
	case stocks.EdgeStocks:
		m.ResetStocks()
		return nil
	}
	return fmt.Errorf("unknown Stocks edge %s", name)
}
