// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gushikem01/usa-kabu-go/server/ent/stocks"
)

// StocksCreate is the builder for creating a Stocks entity.
type StocksCreate struct {
	config
	mutation *StocksMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSymbol sets the "symbol" field.
func (sc *StocksCreate) SetSymbol(s string) *StocksCreate {
	sc.mutation.SetSymbol(s)
	return sc
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (sc *StocksCreate) SetNillableSymbol(s *string) *StocksCreate {
	if s != nil {
		sc.SetSymbol(*s)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StocksCreate) SetName(s string) *StocksCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *StocksCreate) SetNillableName(s *string) *StocksCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetNameJa sets the "name_ja" field.
func (sc *StocksCreate) SetNameJa(s string) *StocksCreate {
	sc.mutation.SetNameJa(s)
	return sc
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (sc *StocksCreate) SetNillableNameJa(s *string) *StocksCreate {
	if s != nil {
		sc.SetNameJa(*s)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *StocksCreate) SetType(s string) *StocksCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *StocksCreate) SetNillableType(s *string) *StocksCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetExchange sets the "exchange" field.
func (sc *StocksCreate) SetExchange(s string) *StocksCreate {
	sc.mutation.SetExchange(s)
	return sc
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sc *StocksCreate) SetNillableExchange(s *string) *StocksCreate {
	if s != nil {
		sc.SetExchange(*s)
	}
	return sc
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (sc *StocksCreate) SetExchangeShortName(s string) *StocksCreate {
	sc.mutation.SetExchangeShortName(s)
	return sc
}

// SetNillableExchangeShortName sets the "exchange_short_name" field if the given value is not nil.
func (sc *StocksCreate) SetNillableExchangeShortName(s *string) *StocksCreate {
	if s != nil {
		sc.SetExchangeShortName(*s)
	}
	return sc
}

// SetPrice sets the "price" field.
func (sc *StocksCreate) SetPrice(f float64) *StocksCreate {
	sc.mutation.SetPrice(f)
	return sc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sc *StocksCreate) SetNillablePrice(f *float64) *StocksCreate {
	if f != nil {
		sc.SetPrice(*f)
	}
	return sc
}

// SetIndustry sets the "industry" field.
func (sc *StocksCreate) SetIndustry(s string) *StocksCreate {
	sc.mutation.SetIndustry(s)
	return sc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (sc *StocksCreate) SetNillableIndustry(s *string) *StocksCreate {
	if s != nil {
		sc.SetIndustry(*s)
	}
	return sc
}

// SetMarketCarp sets the "market_carp" field.
func (sc *StocksCreate) SetMarketCarp(f float64) *StocksCreate {
	sc.mutation.SetMarketCarp(f)
	return sc
}

// SetNillableMarketCarp sets the "market_carp" field if the given value is not nil.
func (sc *StocksCreate) SetNillableMarketCarp(f *float64) *StocksCreate {
	if f != nil {
		sc.SetMarketCarp(*f)
	}
	return sc
}

// SetLastDiv sets the "last_div" field.
func (sc *StocksCreate) SetLastDiv(f float64) *StocksCreate {
	sc.mutation.SetLastDiv(f)
	return sc
}

// SetNillableLastDiv sets the "last_div" field if the given value is not nil.
func (sc *StocksCreate) SetNillableLastDiv(f *float64) *StocksCreate {
	if f != nil {
		sc.SetLastDiv(*f)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *StocksCreate) SetDescription(f float64) *StocksCreate {
	sc.mutation.SetDescription(f)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StocksCreate) SetNillableDescription(f *float64) *StocksCreate {
	if f != nil {
		sc.SetDescription(*f)
	}
	return sc
}

// SetWebsite sets the "website" field.
func (sc *StocksCreate) SetWebsite(s string) *StocksCreate {
	sc.mutation.SetWebsite(s)
	return sc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (sc *StocksCreate) SetNillableWebsite(s *string) *StocksCreate {
	if s != nil {
		sc.SetWebsite(*s)
	}
	return sc
}

// SetCeo sets the "ceo" field.
func (sc *StocksCreate) SetCeo(s string) *StocksCreate {
	sc.mutation.SetCeo(s)
	return sc
}

// SetNillableCeo sets the "ceo" field if the given value is not nil.
func (sc *StocksCreate) SetNillableCeo(s *string) *StocksCreate {
	if s != nil {
		sc.SetCeo(*s)
	}
	return sc
}

// SetSector sets the "sector" field.
func (sc *StocksCreate) SetSector(s string) *StocksCreate {
	sc.mutation.SetSector(s)
	return sc
}

// SetNillableSector sets the "sector" field if the given value is not nil.
func (sc *StocksCreate) SetNillableSector(s *string) *StocksCreate {
	if s != nil {
		sc.SetSector(*s)
	}
	return sc
}

// SetCountry sets the "country" field.
func (sc *StocksCreate) SetCountry(s string) *StocksCreate {
	sc.mutation.SetCountry(s)
	return sc
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sc *StocksCreate) SetNillableCountry(s *string) *StocksCreate {
	if s != nil {
		sc.SetCountry(*s)
	}
	return sc
}

// SetFullTimeEmployees sets the "full_time_employees" field.
func (sc *StocksCreate) SetFullTimeEmployees(s string) *StocksCreate {
	sc.mutation.SetFullTimeEmployees(s)
	return sc
}

// SetNillableFullTimeEmployees sets the "full_time_employees" field if the given value is not nil.
func (sc *StocksCreate) SetNillableFullTimeEmployees(s *string) *StocksCreate {
	if s != nil {
		sc.SetFullTimeEmployees(*s)
	}
	return sc
}

// SetPhone sets the "phone" field.
func (sc *StocksCreate) SetPhone(s string) *StocksCreate {
	sc.mutation.SetPhone(s)
	return sc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sc *StocksCreate) SetNillablePhone(s *string) *StocksCreate {
	if s != nil {
		sc.SetPhone(*s)
	}
	return sc
}

// SetAddress sets the "address" field.
func (sc *StocksCreate) SetAddress(s string) *StocksCreate {
	sc.mutation.SetAddress(s)
	return sc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (sc *StocksCreate) SetNillableAddress(s *string) *StocksCreate {
	if s != nil {
		sc.SetAddress(*s)
	}
	return sc
}

// SetCity sets the "city" field.
func (sc *StocksCreate) SetCity(s string) *StocksCreate {
	sc.mutation.SetCity(s)
	return sc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sc *StocksCreate) SetNillableCity(s *string) *StocksCreate {
	if s != nil {
		sc.SetCity(*s)
	}
	return sc
}

// SetState sets the "state" field.
func (sc *StocksCreate) SetState(s string) *StocksCreate {
	sc.mutation.SetState(s)
	return sc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (sc *StocksCreate) SetNillableState(s *string) *StocksCreate {
	if s != nil {
		sc.SetState(*s)
	}
	return sc
}

// SetZip sets the "zip" field.
func (sc *StocksCreate) SetZip(s string) *StocksCreate {
	sc.mutation.SetZip(s)
	return sc
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (sc *StocksCreate) SetNillableZip(s *string) *StocksCreate {
	if s != nil {
		sc.SetZip(*s)
	}
	return sc
}

// SetImage sets the "image" field.
func (sc *StocksCreate) SetImage(s string) *StocksCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (sc *StocksCreate) SetNillableImage(s *string) *StocksCreate {
	if s != nil {
		sc.SetImage(*s)
	}
	return sc
}

// SetIpoDate sets the "ipo_date" field.
func (sc *StocksCreate) SetIpoDate(s string) *StocksCreate {
	sc.mutation.SetIpoDate(s)
	return sc
}

// SetNillableIpoDate sets the "ipo_date" field if the given value is not nil.
func (sc *StocksCreate) SetNillableIpoDate(s *string) *StocksCreate {
	if s != nil {
		sc.SetIpoDate(*s)
	}
	return sc
}

// SetYield sets the "yield" field.
func (sc *StocksCreate) SetYield(f float64) *StocksCreate {
	sc.mutation.SetYield(f)
	return sc
}

// SetNillableYield sets the "yield" field if the given value is not nil.
func (sc *StocksCreate) SetNillableYield(f *float64) *StocksCreate {
	if f != nil {
		sc.SetYield(*f)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StocksCreate) SetCreatedAt(t time.Time) *StocksCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StocksCreate) SetNillableCreatedAt(t *time.Time) *StocksCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StocksCreate) SetUpdatedAt(t time.Time) *StocksCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StocksCreate) SetNillableUpdatedAt(t *time.Time) *StocksCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// AddStockIDs adds the "stocks" edge to the Stocks entity by IDs.
func (sc *StocksCreate) AddStockIDs(ids ...int) *StocksCreate {
	sc.mutation.AddStockIDs(ids...)
	return sc
}

// AddStocks adds the "stocks" edges to the Stocks entity.
func (sc *StocksCreate) AddStocks(s ...*Stocks) *StocksCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddStockIDs(ids...)
}

// Mutation returns the StocksMutation object of the builder.
func (sc *StocksCreate) Mutation() *StocksMutation {
	return sc.mutation
}

// Save creates the Stocks in the database.
func (sc *StocksCreate) Save(ctx context.Context) (*Stocks, error) {
	var (
		err  error
		node *Stocks
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StocksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StocksCreate) SaveX(ctx context.Context) *Stocks {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StocksCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StocksCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StocksCreate) defaults() {
	if _, ok := sc.mutation.Name(); !ok {
		v := stocks.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.NameJa(); !ok {
		v := stocks.DefaultNameJa
		sc.mutation.SetNameJa(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := stocks.DefaultType
		sc.mutation.SetType(v)
	}
	if _, ok := sc.mutation.Exchange(); !ok {
		v := stocks.DefaultExchange
		sc.mutation.SetExchange(v)
	}
	if _, ok := sc.mutation.ExchangeShortName(); !ok {
		v := stocks.DefaultExchangeShortName
		sc.mutation.SetExchangeShortName(v)
	}
	if _, ok := sc.mutation.Price(); !ok {
		v := stocks.DefaultPrice
		sc.mutation.SetPrice(v)
	}
	if _, ok := sc.mutation.Industry(); !ok {
		v := stocks.DefaultIndustry
		sc.mutation.SetIndustry(v)
	}
	if _, ok := sc.mutation.MarketCarp(); !ok {
		v := stocks.DefaultMarketCarp
		sc.mutation.SetMarketCarp(v)
	}
	if _, ok := sc.mutation.LastDiv(); !ok {
		v := stocks.DefaultLastDiv
		sc.mutation.SetLastDiv(v)
	}
	if _, ok := sc.mutation.Description(); !ok {
		v := stocks.DefaultDescription
		sc.mutation.SetDescription(v)
	}
	if _, ok := sc.mutation.Website(); !ok {
		v := stocks.DefaultWebsite
		sc.mutation.SetWebsite(v)
	}
	if _, ok := sc.mutation.Ceo(); !ok {
		v := stocks.DefaultCeo
		sc.mutation.SetCeo(v)
	}
	if _, ok := sc.mutation.Sector(); !ok {
		v := stocks.DefaultSector
		sc.mutation.SetSector(v)
	}
	if _, ok := sc.mutation.Country(); !ok {
		v := stocks.DefaultCountry
		sc.mutation.SetCountry(v)
	}
	if _, ok := sc.mutation.FullTimeEmployees(); !ok {
		v := stocks.DefaultFullTimeEmployees
		sc.mutation.SetFullTimeEmployees(v)
	}
	if _, ok := sc.mutation.Phone(); !ok {
		v := stocks.DefaultPhone
		sc.mutation.SetPhone(v)
	}
	if _, ok := sc.mutation.Address(); !ok {
		v := stocks.DefaultAddress
		sc.mutation.SetAddress(v)
	}
	if _, ok := sc.mutation.City(); !ok {
		v := stocks.DefaultCity
		sc.mutation.SetCity(v)
	}
	if _, ok := sc.mutation.State(); !ok {
		v := stocks.DefaultState
		sc.mutation.SetState(v)
	}
	if _, ok := sc.mutation.Zip(); !ok {
		v := stocks.DefaultZip
		sc.mutation.SetZip(v)
	}
	if _, ok := sc.mutation.Image(); !ok {
		v := stocks.DefaultImage
		sc.mutation.SetImage(v)
	}
	if _, ok := sc.mutation.IpoDate(); !ok {
		v := stocks.DefaultIpoDate
		sc.mutation.SetIpoDate(v)
	}
	if _, ok := sc.mutation.Yield(); !ok {
		v := stocks.DefaultYield
		sc.mutation.SetYield(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := stocks.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := stocks.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StocksCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Stocks.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Stocks.updated_at"`)}
	}
	return nil
}

func (sc *StocksCreate) sqlSave(ctx context.Context) (*Stocks, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *StocksCreate) createSpec() (*Stocks, *sqlgraph.CreateSpec) {
	var (
		_node = &Stocks{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stocks.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stocks.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.NameJa(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldNameJa,
		})
		_node.NameJa = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sc.mutation.Exchange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchange,
		})
		_node.Exchange = value
	}
	if value, ok := sc.mutation.ExchangeShortName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchangeShortName,
		})
		_node.ExchangeShortName = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := sc.mutation.Industry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldIndustry,
		})
		_node.Industry = value
	}
	if value, ok := sc.mutation.MarketCarp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
		_node.MarketCarp = value
	}
	if value, ok := sc.mutation.LastDiv(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
		_node.LastDiv = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Website(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldWebsite,
		})
		_node.Website = value
	}
	if value, ok := sc.mutation.Ceo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldCeo,
		})
		_node.Ceo = value
	}
	if value, ok := sc.mutation.Sector(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldSector,
		})
		_node.Sector = value
	}
	if value, ok := sc.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := sc.mutation.FullTimeEmployees(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldFullTimeEmployees,
		})
		_node.FullTimeEmployees = value
	}
	if value, ok := sc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := sc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := sc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldCity,
		})
		_node.City = value
	}
	if value, ok := sc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldState,
		})
		_node.State = value
	}
	if value, ok := sc.mutation.Zip(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldZip,
		})
		_node.Zip = value
	}
	if value, ok := sc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := sc.mutation.IpoDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldIpoDate,
		})
		_node.IpoDate = value
	}
	if value, ok := sc.mutation.Yield(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
		_node.Yield = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stocks.Create().
//		SetSymbol(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StocksUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StocksCreate) OnConflict(opts ...sql.ConflictOption) *StocksUpsertOne {
	sc.conflict = opts
	return &StocksUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stocks.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StocksCreate) OnConflictColumns(columns ...string) *StocksUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StocksUpsertOne{
		create: sc,
	}
}

type (
	// StocksUpsertOne is the builder for "upsert"-ing
	//  one Stocks node.
	StocksUpsertOne struct {
		create *StocksCreate
	}

	// StocksUpsert is the "OnConflict" setter.
	StocksUpsert struct {
		*sql.UpdateSet
	}
)

// SetSymbol sets the "symbol" field.
func (u *StocksUpsert) SetSymbol(v string) *StocksUpsert {
	u.Set(stocks.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *StocksUpsert) UpdateSymbol() *StocksUpsert {
	u.SetExcluded(stocks.FieldSymbol)
	return u
}

// ClearSymbol clears the value of the "symbol" field.
func (u *StocksUpsert) ClearSymbol() *StocksUpsert {
	u.SetNull(stocks.FieldSymbol)
	return u
}

// SetName sets the "name" field.
func (u *StocksUpsert) SetName(v string) *StocksUpsert {
	u.Set(stocks.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StocksUpsert) UpdateName() *StocksUpsert {
	u.SetExcluded(stocks.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *StocksUpsert) ClearName() *StocksUpsert {
	u.SetNull(stocks.FieldName)
	return u
}

// SetNameJa sets the "name_ja" field.
func (u *StocksUpsert) SetNameJa(v string) *StocksUpsert {
	u.Set(stocks.FieldNameJa, v)
	return u
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *StocksUpsert) UpdateNameJa() *StocksUpsert {
	u.SetExcluded(stocks.FieldNameJa)
	return u
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *StocksUpsert) ClearNameJa() *StocksUpsert {
	u.SetNull(stocks.FieldNameJa)
	return u
}

// SetType sets the "type" field.
func (u *StocksUpsert) SetType(v string) *StocksUpsert {
	u.Set(stocks.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StocksUpsert) UpdateType() *StocksUpsert {
	u.SetExcluded(stocks.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *StocksUpsert) ClearType() *StocksUpsert {
	u.SetNull(stocks.FieldType)
	return u
}

// SetExchange sets the "exchange" field.
func (u *StocksUpsert) SetExchange(v string) *StocksUpsert {
	u.Set(stocks.FieldExchange, v)
	return u
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *StocksUpsert) UpdateExchange() *StocksUpsert {
	u.SetExcluded(stocks.FieldExchange)
	return u
}

// ClearExchange clears the value of the "exchange" field.
func (u *StocksUpsert) ClearExchange() *StocksUpsert {
	u.SetNull(stocks.FieldExchange)
	return u
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (u *StocksUpsert) SetExchangeShortName(v string) *StocksUpsert {
	u.Set(stocks.FieldExchangeShortName, v)
	return u
}

// UpdateExchangeShortName sets the "exchange_short_name" field to the value that was provided on create.
func (u *StocksUpsert) UpdateExchangeShortName() *StocksUpsert {
	u.SetExcluded(stocks.FieldExchangeShortName)
	return u
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (u *StocksUpsert) ClearExchangeShortName() *StocksUpsert {
	u.SetNull(stocks.FieldExchangeShortName)
	return u
}

// SetPrice sets the "price" field.
func (u *StocksUpsert) SetPrice(v float64) *StocksUpsert {
	u.Set(stocks.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *StocksUpsert) UpdatePrice() *StocksUpsert {
	u.SetExcluded(stocks.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *StocksUpsert) AddPrice(v float64) *StocksUpsert {
	u.Add(stocks.FieldPrice, v)
	return u
}

// ClearPrice clears the value of the "price" field.
func (u *StocksUpsert) ClearPrice() *StocksUpsert {
	u.SetNull(stocks.FieldPrice)
	return u
}

// SetIndustry sets the "industry" field.
func (u *StocksUpsert) SetIndustry(v string) *StocksUpsert {
	u.Set(stocks.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *StocksUpsert) UpdateIndustry() *StocksUpsert {
	u.SetExcluded(stocks.FieldIndustry)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *StocksUpsert) ClearIndustry() *StocksUpsert {
	u.SetNull(stocks.FieldIndustry)
	return u
}

// SetMarketCarp sets the "market_carp" field.
func (u *StocksUpsert) SetMarketCarp(v float64) *StocksUpsert {
	u.Set(stocks.FieldMarketCarp, v)
	return u
}

// UpdateMarketCarp sets the "market_carp" field to the value that was provided on create.
func (u *StocksUpsert) UpdateMarketCarp() *StocksUpsert {
	u.SetExcluded(stocks.FieldMarketCarp)
	return u
}

// AddMarketCarp adds v to the "market_carp" field.
func (u *StocksUpsert) AddMarketCarp(v float64) *StocksUpsert {
	u.Add(stocks.FieldMarketCarp, v)
	return u
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (u *StocksUpsert) ClearMarketCarp() *StocksUpsert {
	u.SetNull(stocks.FieldMarketCarp)
	return u
}

// SetLastDiv sets the "last_div" field.
func (u *StocksUpsert) SetLastDiv(v float64) *StocksUpsert {
	u.Set(stocks.FieldLastDiv, v)
	return u
}

// UpdateLastDiv sets the "last_div" field to the value that was provided on create.
func (u *StocksUpsert) UpdateLastDiv() *StocksUpsert {
	u.SetExcluded(stocks.FieldLastDiv)
	return u
}

// AddLastDiv adds v to the "last_div" field.
func (u *StocksUpsert) AddLastDiv(v float64) *StocksUpsert {
	u.Add(stocks.FieldLastDiv, v)
	return u
}

// ClearLastDiv clears the value of the "last_div" field.
func (u *StocksUpsert) ClearLastDiv() *StocksUpsert {
	u.SetNull(stocks.FieldLastDiv)
	return u
}

// SetDescription sets the "description" field.
func (u *StocksUpsert) SetDescription(v float64) *StocksUpsert {
	u.Set(stocks.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StocksUpsert) UpdateDescription() *StocksUpsert {
	u.SetExcluded(stocks.FieldDescription)
	return u
}

// AddDescription adds v to the "description" field.
func (u *StocksUpsert) AddDescription(v float64) *StocksUpsert {
	u.Add(stocks.FieldDescription, v)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *StocksUpsert) ClearDescription() *StocksUpsert {
	u.SetNull(stocks.FieldDescription)
	return u
}

// SetWebsite sets the "website" field.
func (u *StocksUpsert) SetWebsite(v string) *StocksUpsert {
	u.Set(stocks.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *StocksUpsert) UpdateWebsite() *StocksUpsert {
	u.SetExcluded(stocks.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *StocksUpsert) ClearWebsite() *StocksUpsert {
	u.SetNull(stocks.FieldWebsite)
	return u
}

// SetCeo sets the "ceo" field.
func (u *StocksUpsert) SetCeo(v string) *StocksUpsert {
	u.Set(stocks.FieldCeo, v)
	return u
}

// UpdateCeo sets the "ceo" field to the value that was provided on create.
func (u *StocksUpsert) UpdateCeo() *StocksUpsert {
	u.SetExcluded(stocks.FieldCeo)
	return u
}

// ClearCeo clears the value of the "ceo" field.
func (u *StocksUpsert) ClearCeo() *StocksUpsert {
	u.SetNull(stocks.FieldCeo)
	return u
}

// SetSector sets the "sector" field.
func (u *StocksUpsert) SetSector(v string) *StocksUpsert {
	u.Set(stocks.FieldSector, v)
	return u
}

// UpdateSector sets the "sector" field to the value that was provided on create.
func (u *StocksUpsert) UpdateSector() *StocksUpsert {
	u.SetExcluded(stocks.FieldSector)
	return u
}

// ClearSector clears the value of the "sector" field.
func (u *StocksUpsert) ClearSector() *StocksUpsert {
	u.SetNull(stocks.FieldSector)
	return u
}

// SetCountry sets the "country" field.
func (u *StocksUpsert) SetCountry(v string) *StocksUpsert {
	u.Set(stocks.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StocksUpsert) UpdateCountry() *StocksUpsert {
	u.SetExcluded(stocks.FieldCountry)
	return u
}

// ClearCountry clears the value of the "country" field.
func (u *StocksUpsert) ClearCountry() *StocksUpsert {
	u.SetNull(stocks.FieldCountry)
	return u
}

// SetFullTimeEmployees sets the "full_time_employees" field.
func (u *StocksUpsert) SetFullTimeEmployees(v string) *StocksUpsert {
	u.Set(stocks.FieldFullTimeEmployees, v)
	return u
}

// UpdateFullTimeEmployees sets the "full_time_employees" field to the value that was provided on create.
func (u *StocksUpsert) UpdateFullTimeEmployees() *StocksUpsert {
	u.SetExcluded(stocks.FieldFullTimeEmployees)
	return u
}

// ClearFullTimeEmployees clears the value of the "full_time_employees" field.
func (u *StocksUpsert) ClearFullTimeEmployees() *StocksUpsert {
	u.SetNull(stocks.FieldFullTimeEmployees)
	return u
}

// SetPhone sets the "phone" field.
func (u *StocksUpsert) SetPhone(v string) *StocksUpsert {
	u.Set(stocks.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *StocksUpsert) UpdatePhone() *StocksUpsert {
	u.SetExcluded(stocks.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *StocksUpsert) ClearPhone() *StocksUpsert {
	u.SetNull(stocks.FieldPhone)
	return u
}

// SetAddress sets the "address" field.
func (u *StocksUpsert) SetAddress(v string) *StocksUpsert {
	u.Set(stocks.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *StocksUpsert) UpdateAddress() *StocksUpsert {
	u.SetExcluded(stocks.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *StocksUpsert) ClearAddress() *StocksUpsert {
	u.SetNull(stocks.FieldAddress)
	return u
}

// SetCity sets the "city" field.
func (u *StocksUpsert) SetCity(v string) *StocksUpsert {
	u.Set(stocks.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *StocksUpsert) UpdateCity() *StocksUpsert {
	u.SetExcluded(stocks.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *StocksUpsert) ClearCity() *StocksUpsert {
	u.SetNull(stocks.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *StocksUpsert) SetState(v string) *StocksUpsert {
	u.Set(stocks.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StocksUpsert) UpdateState() *StocksUpsert {
	u.SetExcluded(stocks.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *StocksUpsert) ClearState() *StocksUpsert {
	u.SetNull(stocks.FieldState)
	return u
}

// SetZip sets the "zip" field.
func (u *StocksUpsert) SetZip(v string) *StocksUpsert {
	u.Set(stocks.FieldZip, v)
	return u
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *StocksUpsert) UpdateZip() *StocksUpsert {
	u.SetExcluded(stocks.FieldZip)
	return u
}

// ClearZip clears the value of the "zip" field.
func (u *StocksUpsert) ClearZip() *StocksUpsert {
	u.SetNull(stocks.FieldZip)
	return u
}

// SetImage sets the "image" field.
func (u *StocksUpsert) SetImage(v string) *StocksUpsert {
	u.Set(stocks.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StocksUpsert) UpdateImage() *StocksUpsert {
	u.SetExcluded(stocks.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *StocksUpsert) ClearImage() *StocksUpsert {
	u.SetNull(stocks.FieldImage)
	return u
}

// SetIpoDate sets the "ipo_date" field.
func (u *StocksUpsert) SetIpoDate(v string) *StocksUpsert {
	u.Set(stocks.FieldIpoDate, v)
	return u
}

// UpdateIpoDate sets the "ipo_date" field to the value that was provided on create.
func (u *StocksUpsert) UpdateIpoDate() *StocksUpsert {
	u.SetExcluded(stocks.FieldIpoDate)
	return u
}

// ClearIpoDate clears the value of the "ipo_date" field.
func (u *StocksUpsert) ClearIpoDate() *StocksUpsert {
	u.SetNull(stocks.FieldIpoDate)
	return u
}

// SetYield sets the "yield" field.
func (u *StocksUpsert) SetYield(v float64) *StocksUpsert {
	u.Set(stocks.FieldYield, v)
	return u
}

// UpdateYield sets the "yield" field to the value that was provided on create.
func (u *StocksUpsert) UpdateYield() *StocksUpsert {
	u.SetExcluded(stocks.FieldYield)
	return u
}

// AddYield adds v to the "yield" field.
func (u *StocksUpsert) AddYield(v float64) *StocksUpsert {
	u.Add(stocks.FieldYield, v)
	return u
}

// ClearYield clears the value of the "yield" field.
func (u *StocksUpsert) ClearYield() *StocksUpsert {
	u.SetNull(stocks.FieldYield)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StocksUpsert) SetCreatedAt(v time.Time) *StocksUpsert {
	u.Set(stocks.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StocksUpsert) UpdateCreatedAt() *StocksUpsert {
	u.SetExcluded(stocks.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StocksUpsert) SetUpdatedAt(v time.Time) *StocksUpsert {
	u.Set(stocks.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StocksUpsert) UpdateUpdatedAt() *StocksUpsert {
	u.SetExcluded(stocks.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Stocks.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StocksUpsertOne) UpdateNewValues() *StocksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Stocks.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StocksUpsertOne) Ignore() *StocksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StocksUpsertOne) DoNothing() *StocksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StocksCreate.OnConflict
// documentation for more info.
func (u *StocksUpsertOne) Update(set func(*StocksUpsert)) *StocksUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StocksUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *StocksUpsertOne) SetSymbol(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateSymbol() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateSymbol()
	})
}

// ClearSymbol clears the value of the "symbol" field.
func (u *StocksUpsertOne) ClearSymbol() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearSymbol()
	})
}

// SetName sets the "name" field.
func (u *StocksUpsertOne) SetName(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateName() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *StocksUpsertOne) ClearName() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearName()
	})
}

// SetNameJa sets the "name_ja" field.
func (u *StocksUpsertOne) SetNameJa(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateNameJa() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *StocksUpsertOne) ClearNameJa() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearNameJa()
	})
}

// SetType sets the "type" field.
func (u *StocksUpsertOne) SetType(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateType() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *StocksUpsertOne) ClearType() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearType()
	})
}

// SetExchange sets the "exchange" field.
func (u *StocksUpsertOne) SetExchange(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetExchange(v)
	})
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateExchange() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateExchange()
	})
}

// ClearExchange clears the value of the "exchange" field.
func (u *StocksUpsertOne) ClearExchange() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearExchange()
	})
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (u *StocksUpsertOne) SetExchangeShortName(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetExchangeShortName(v)
	})
}

// UpdateExchangeShortName sets the "exchange_short_name" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateExchangeShortName() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateExchangeShortName()
	})
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (u *StocksUpsertOne) ClearExchangeShortName() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearExchangeShortName()
	})
}

// SetPrice sets the "price" field.
func (u *StocksUpsertOne) SetPrice(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *StocksUpsertOne) AddPrice(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdatePrice() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *StocksUpsertOne) ClearPrice() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearPrice()
	})
}

// SetIndustry sets the "industry" field.
func (u *StocksUpsertOne) SetIndustry(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateIndustry() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *StocksUpsertOne) ClearIndustry() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearIndustry()
	})
}

// SetMarketCarp sets the "market_carp" field.
func (u *StocksUpsertOne) SetMarketCarp(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetMarketCarp(v)
	})
}

// AddMarketCarp adds v to the "market_carp" field.
func (u *StocksUpsertOne) AddMarketCarp(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.AddMarketCarp(v)
	})
}

// UpdateMarketCarp sets the "market_carp" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateMarketCarp() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateMarketCarp()
	})
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (u *StocksUpsertOne) ClearMarketCarp() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearMarketCarp()
	})
}

// SetLastDiv sets the "last_div" field.
func (u *StocksUpsertOne) SetLastDiv(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetLastDiv(v)
	})
}

// AddLastDiv adds v to the "last_div" field.
func (u *StocksUpsertOne) AddLastDiv(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.AddLastDiv(v)
	})
}

// UpdateLastDiv sets the "last_div" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateLastDiv() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateLastDiv()
	})
}

// ClearLastDiv clears the value of the "last_div" field.
func (u *StocksUpsertOne) ClearLastDiv() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearLastDiv()
	})
}

// SetDescription sets the "description" field.
func (u *StocksUpsertOne) SetDescription(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetDescription(v)
	})
}

// AddDescription adds v to the "description" field.
func (u *StocksUpsertOne) AddDescription(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.AddDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateDescription() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StocksUpsertOne) ClearDescription() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearDescription()
	})
}

// SetWebsite sets the "website" field.
func (u *StocksUpsertOne) SetWebsite(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateWebsite() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *StocksUpsertOne) ClearWebsite() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearWebsite()
	})
}

// SetCeo sets the "ceo" field.
func (u *StocksUpsertOne) SetCeo(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetCeo(v)
	})
}

// UpdateCeo sets the "ceo" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateCeo() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCeo()
	})
}

// ClearCeo clears the value of the "ceo" field.
func (u *StocksUpsertOne) ClearCeo() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCeo()
	})
}

// SetSector sets the "sector" field.
func (u *StocksUpsertOne) SetSector(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetSector(v)
	})
}

// UpdateSector sets the "sector" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateSector() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateSector()
	})
}

// ClearSector clears the value of the "sector" field.
func (u *StocksUpsertOne) ClearSector() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearSector()
	})
}

// SetCountry sets the "country" field.
func (u *StocksUpsertOne) SetCountry(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateCountry() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *StocksUpsertOne) ClearCountry() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCountry()
	})
}

// SetFullTimeEmployees sets the "full_time_employees" field.
func (u *StocksUpsertOne) SetFullTimeEmployees(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetFullTimeEmployees(v)
	})
}

// UpdateFullTimeEmployees sets the "full_time_employees" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateFullTimeEmployees() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateFullTimeEmployees()
	})
}

// ClearFullTimeEmployees clears the value of the "full_time_employees" field.
func (u *StocksUpsertOne) ClearFullTimeEmployees() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearFullTimeEmployees()
	})
}

// SetPhone sets the "phone" field.
func (u *StocksUpsertOne) SetPhone(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdatePhone() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *StocksUpsertOne) ClearPhone() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearPhone()
	})
}

// SetAddress sets the "address" field.
func (u *StocksUpsertOne) SetAddress(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateAddress() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *StocksUpsertOne) ClearAddress() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearAddress()
	})
}

// SetCity sets the "city" field.
func (u *StocksUpsertOne) SetCity(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateCity() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *StocksUpsertOne) ClearCity() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *StocksUpsertOne) SetState(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateState() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *StocksUpsertOne) ClearState() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *StocksUpsertOne) SetZip(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateZip() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateZip()
	})
}

// ClearZip clears the value of the "zip" field.
func (u *StocksUpsertOne) ClearZip() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearZip()
	})
}

// SetImage sets the "image" field.
func (u *StocksUpsertOne) SetImage(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateImage() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *StocksUpsertOne) ClearImage() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearImage()
	})
}

// SetIpoDate sets the "ipo_date" field.
func (u *StocksUpsertOne) SetIpoDate(v string) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetIpoDate(v)
	})
}

// UpdateIpoDate sets the "ipo_date" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateIpoDate() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateIpoDate()
	})
}

// ClearIpoDate clears the value of the "ipo_date" field.
func (u *StocksUpsertOne) ClearIpoDate() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearIpoDate()
	})
}

// SetYield sets the "yield" field.
func (u *StocksUpsertOne) SetYield(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetYield(v)
	})
}

// AddYield adds v to the "yield" field.
func (u *StocksUpsertOne) AddYield(v float64) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.AddYield(v)
	})
}

// UpdateYield sets the "yield" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateYield() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateYield()
	})
}

// ClearYield clears the value of the "yield" field.
func (u *StocksUpsertOne) ClearYield() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.ClearYield()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StocksUpsertOne) SetCreatedAt(v time.Time) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateCreatedAt() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StocksUpsertOne) SetUpdatedAt(v time.Time) *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StocksUpsertOne) UpdateUpdatedAt() *StocksUpsertOne {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *StocksUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StocksCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StocksUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StocksUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StocksUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StocksCreateBulk is the builder for creating many Stocks entities in bulk.
type StocksCreateBulk struct {
	config
	builders []*StocksCreate
	conflict []sql.ConflictOption
}

// Save creates the Stocks entities in the database.
func (scb *StocksCreateBulk) Save(ctx context.Context) ([]*Stocks, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stocks, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StocksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StocksCreateBulk) SaveX(ctx context.Context) []*Stocks {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StocksCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StocksCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stocks.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StocksUpsert) {
//			SetSymbol(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StocksCreateBulk) OnConflict(opts ...sql.ConflictOption) *StocksUpsertBulk {
	scb.conflict = opts
	return &StocksUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stocks.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StocksCreateBulk) OnConflictColumns(columns ...string) *StocksUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StocksUpsertBulk{
		create: scb,
	}
}

// StocksUpsertBulk is the builder for "upsert"-ing
// a bulk of Stocks nodes.
type StocksUpsertBulk struct {
	create *StocksCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Stocks.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StocksUpsertBulk) UpdateNewValues() *StocksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stocks.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StocksUpsertBulk) Ignore() *StocksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StocksUpsertBulk) DoNothing() *StocksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StocksCreateBulk.OnConflict
// documentation for more info.
func (u *StocksUpsertBulk) Update(set func(*StocksUpsert)) *StocksUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StocksUpsert{UpdateSet: update})
	}))
	return u
}

// SetSymbol sets the "symbol" field.
func (u *StocksUpsertBulk) SetSymbol(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateSymbol() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateSymbol()
	})
}

// ClearSymbol clears the value of the "symbol" field.
func (u *StocksUpsertBulk) ClearSymbol() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearSymbol()
	})
}

// SetName sets the "name" field.
func (u *StocksUpsertBulk) SetName(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateName() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *StocksUpsertBulk) ClearName() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearName()
	})
}

// SetNameJa sets the "name_ja" field.
func (u *StocksUpsertBulk) SetNameJa(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetNameJa(v)
	})
}

// UpdateNameJa sets the "name_ja" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateNameJa() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateNameJa()
	})
}

// ClearNameJa clears the value of the "name_ja" field.
func (u *StocksUpsertBulk) ClearNameJa() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearNameJa()
	})
}

// SetType sets the "type" field.
func (u *StocksUpsertBulk) SetType(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateType() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *StocksUpsertBulk) ClearType() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearType()
	})
}

// SetExchange sets the "exchange" field.
func (u *StocksUpsertBulk) SetExchange(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetExchange(v)
	})
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateExchange() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateExchange()
	})
}

// ClearExchange clears the value of the "exchange" field.
func (u *StocksUpsertBulk) ClearExchange() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearExchange()
	})
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (u *StocksUpsertBulk) SetExchangeShortName(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetExchangeShortName(v)
	})
}

// UpdateExchangeShortName sets the "exchange_short_name" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateExchangeShortName() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateExchangeShortName()
	})
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (u *StocksUpsertBulk) ClearExchangeShortName() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearExchangeShortName()
	})
}

// SetPrice sets the "price" field.
func (u *StocksUpsertBulk) SetPrice(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *StocksUpsertBulk) AddPrice(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdatePrice() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdatePrice()
	})
}

// ClearPrice clears the value of the "price" field.
func (u *StocksUpsertBulk) ClearPrice() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearPrice()
	})
}

// SetIndustry sets the "industry" field.
func (u *StocksUpsertBulk) SetIndustry(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateIndustry() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *StocksUpsertBulk) ClearIndustry() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearIndustry()
	})
}

// SetMarketCarp sets the "market_carp" field.
func (u *StocksUpsertBulk) SetMarketCarp(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetMarketCarp(v)
	})
}

// AddMarketCarp adds v to the "market_carp" field.
func (u *StocksUpsertBulk) AddMarketCarp(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.AddMarketCarp(v)
	})
}

// UpdateMarketCarp sets the "market_carp" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateMarketCarp() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateMarketCarp()
	})
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (u *StocksUpsertBulk) ClearMarketCarp() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearMarketCarp()
	})
}

// SetLastDiv sets the "last_div" field.
func (u *StocksUpsertBulk) SetLastDiv(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetLastDiv(v)
	})
}

// AddLastDiv adds v to the "last_div" field.
func (u *StocksUpsertBulk) AddLastDiv(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.AddLastDiv(v)
	})
}

// UpdateLastDiv sets the "last_div" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateLastDiv() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateLastDiv()
	})
}

// ClearLastDiv clears the value of the "last_div" field.
func (u *StocksUpsertBulk) ClearLastDiv() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearLastDiv()
	})
}

// SetDescription sets the "description" field.
func (u *StocksUpsertBulk) SetDescription(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetDescription(v)
	})
}

// AddDescription adds v to the "description" field.
func (u *StocksUpsertBulk) AddDescription(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.AddDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateDescription() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StocksUpsertBulk) ClearDescription() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearDescription()
	})
}

// SetWebsite sets the "website" field.
func (u *StocksUpsertBulk) SetWebsite(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateWebsite() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *StocksUpsertBulk) ClearWebsite() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearWebsite()
	})
}

// SetCeo sets the "ceo" field.
func (u *StocksUpsertBulk) SetCeo(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetCeo(v)
	})
}

// UpdateCeo sets the "ceo" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateCeo() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCeo()
	})
}

// ClearCeo clears the value of the "ceo" field.
func (u *StocksUpsertBulk) ClearCeo() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCeo()
	})
}

// SetSector sets the "sector" field.
func (u *StocksUpsertBulk) SetSector(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetSector(v)
	})
}

// UpdateSector sets the "sector" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateSector() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateSector()
	})
}

// ClearSector clears the value of the "sector" field.
func (u *StocksUpsertBulk) ClearSector() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearSector()
	})
}

// SetCountry sets the "country" field.
func (u *StocksUpsertBulk) SetCountry(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateCountry() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCountry()
	})
}

// ClearCountry clears the value of the "country" field.
func (u *StocksUpsertBulk) ClearCountry() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCountry()
	})
}

// SetFullTimeEmployees sets the "full_time_employees" field.
func (u *StocksUpsertBulk) SetFullTimeEmployees(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetFullTimeEmployees(v)
	})
}

// UpdateFullTimeEmployees sets the "full_time_employees" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateFullTimeEmployees() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateFullTimeEmployees()
	})
}

// ClearFullTimeEmployees clears the value of the "full_time_employees" field.
func (u *StocksUpsertBulk) ClearFullTimeEmployees() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearFullTimeEmployees()
	})
}

// SetPhone sets the "phone" field.
func (u *StocksUpsertBulk) SetPhone(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdatePhone() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *StocksUpsertBulk) ClearPhone() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearPhone()
	})
}

// SetAddress sets the "address" field.
func (u *StocksUpsertBulk) SetAddress(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateAddress() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *StocksUpsertBulk) ClearAddress() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearAddress()
	})
}

// SetCity sets the "city" field.
func (u *StocksUpsertBulk) SetCity(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateCity() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *StocksUpsertBulk) ClearCity() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearCity()
	})
}

// SetState sets the "state" field.
func (u *StocksUpsertBulk) SetState(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateState() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *StocksUpsertBulk) ClearState() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *StocksUpsertBulk) SetZip(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateZip() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateZip()
	})
}

// ClearZip clears the value of the "zip" field.
func (u *StocksUpsertBulk) ClearZip() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearZip()
	})
}

// SetImage sets the "image" field.
func (u *StocksUpsertBulk) SetImage(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateImage() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *StocksUpsertBulk) ClearImage() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearImage()
	})
}

// SetIpoDate sets the "ipo_date" field.
func (u *StocksUpsertBulk) SetIpoDate(v string) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetIpoDate(v)
	})
}

// UpdateIpoDate sets the "ipo_date" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateIpoDate() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateIpoDate()
	})
}

// ClearIpoDate clears the value of the "ipo_date" field.
func (u *StocksUpsertBulk) ClearIpoDate() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearIpoDate()
	})
}

// SetYield sets the "yield" field.
func (u *StocksUpsertBulk) SetYield(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetYield(v)
	})
}

// AddYield adds v to the "yield" field.
func (u *StocksUpsertBulk) AddYield(v float64) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.AddYield(v)
	})
}

// UpdateYield sets the "yield" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateYield() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateYield()
	})
}

// ClearYield clears the value of the "yield" field.
func (u *StocksUpsertBulk) ClearYield() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.ClearYield()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StocksUpsertBulk) SetCreatedAt(v time.Time) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateCreatedAt() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StocksUpsertBulk) SetUpdatedAt(v time.Time) *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StocksUpsertBulk) UpdateUpdatedAt() *StocksUpsertBulk {
	return u.Update(func(s *StocksUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *StocksUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StocksCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StocksCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StocksUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
