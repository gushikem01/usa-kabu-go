// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gushikem01/usa-kabu-go/server/ent/predicate"
	"github.com/gushikem01/usa-kabu-go/server/ent/stocks"
)

// StocksUpdate is the builder for updating Stocks entities.
type StocksUpdate struct {
	config
	hooks    []Hook
	mutation *StocksMutation
}

// Where appends a list predicates to the StocksUpdate builder.
func (su *StocksUpdate) Where(ps ...predicate.Stocks) *StocksUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSymbol sets the "symbol" field.
func (su *StocksUpdate) SetSymbol(s string) *StocksUpdate {
	su.mutation.SetSymbol(s)
	return su
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (su *StocksUpdate) SetNillableSymbol(s *string) *StocksUpdate {
	if s != nil {
		su.SetSymbol(*s)
	}
	return su
}

// ClearSymbol clears the value of the "symbol" field.
func (su *StocksUpdate) ClearSymbol() *StocksUpdate {
	su.mutation.ClearSymbol()
	return su
}

// SetName sets the "name" field.
func (su *StocksUpdate) SetName(s string) *StocksUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StocksUpdate) SetNillableName(s *string) *StocksUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// ClearName clears the value of the "name" field.
func (su *StocksUpdate) ClearName() *StocksUpdate {
	su.mutation.ClearName()
	return su
}

// SetNameJa sets the "name_ja" field.
func (su *StocksUpdate) SetNameJa(s string) *StocksUpdate {
	su.mutation.SetNameJa(s)
	return su
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (su *StocksUpdate) SetNillableNameJa(s *string) *StocksUpdate {
	if s != nil {
		su.SetNameJa(*s)
	}
	return su
}

// ClearNameJa clears the value of the "name_ja" field.
func (su *StocksUpdate) ClearNameJa() *StocksUpdate {
	su.mutation.ClearNameJa()
	return su
}

// SetType sets the "type" field.
func (su *StocksUpdate) SetType(s string) *StocksUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StocksUpdate) SetNillableType(s *string) *StocksUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// ClearType clears the value of the "type" field.
func (su *StocksUpdate) ClearType() *StocksUpdate {
	su.mutation.ClearType()
	return su
}

// SetExchange sets the "exchange" field.
func (su *StocksUpdate) SetExchange(s string) *StocksUpdate {
	su.mutation.SetExchange(s)
	return su
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (su *StocksUpdate) SetNillableExchange(s *string) *StocksUpdate {
	if s != nil {
		su.SetExchange(*s)
	}
	return su
}

// ClearExchange clears the value of the "exchange" field.
func (su *StocksUpdate) ClearExchange() *StocksUpdate {
	su.mutation.ClearExchange()
	return su
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (su *StocksUpdate) SetExchangeShortName(s string) *StocksUpdate {
	su.mutation.SetExchangeShortName(s)
	return su
}

// SetNillableExchangeShortName sets the "exchange_short_name" field if the given value is not nil.
func (su *StocksUpdate) SetNillableExchangeShortName(s *string) *StocksUpdate {
	if s != nil {
		su.SetExchangeShortName(*s)
	}
	return su
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (su *StocksUpdate) ClearExchangeShortName() *StocksUpdate {
	su.mutation.ClearExchangeShortName()
	return su
}

// SetPrice sets the "price" field.
func (su *StocksUpdate) SetPrice(f float64) *StocksUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(f)
	return su
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (su *StocksUpdate) SetNillablePrice(f *float64) *StocksUpdate {
	if f != nil {
		su.SetPrice(*f)
	}
	return su
}

// AddPrice adds f to the "price" field.
func (su *StocksUpdate) AddPrice(f float64) *StocksUpdate {
	su.mutation.AddPrice(f)
	return su
}

// ClearPrice clears the value of the "price" field.
func (su *StocksUpdate) ClearPrice() *StocksUpdate {
	su.mutation.ClearPrice()
	return su
}

// SetIndustry sets the "industry" field.
func (su *StocksUpdate) SetIndustry(s string) *StocksUpdate {
	su.mutation.SetIndustry(s)
	return su
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (su *StocksUpdate) SetNillableIndustry(s *string) *StocksUpdate {
	if s != nil {
		su.SetIndustry(*s)
	}
	return su
}

// ClearIndustry clears the value of the "industry" field.
func (su *StocksUpdate) ClearIndustry() *StocksUpdate {
	su.mutation.ClearIndustry()
	return su
}

// SetMarketCarp sets the "market_carp" field.
func (su *StocksUpdate) SetMarketCarp(f float64) *StocksUpdate {
	su.mutation.ResetMarketCarp()
	su.mutation.SetMarketCarp(f)
	return su
}

// SetNillableMarketCarp sets the "market_carp" field if the given value is not nil.
func (su *StocksUpdate) SetNillableMarketCarp(f *float64) *StocksUpdate {
	if f != nil {
		su.SetMarketCarp(*f)
	}
	return su
}

// AddMarketCarp adds f to the "market_carp" field.
func (su *StocksUpdate) AddMarketCarp(f float64) *StocksUpdate {
	su.mutation.AddMarketCarp(f)
	return su
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (su *StocksUpdate) ClearMarketCarp() *StocksUpdate {
	su.mutation.ClearMarketCarp()
	return su
}

// SetLastDiv sets the "last_div" field.
func (su *StocksUpdate) SetLastDiv(i int) *StocksUpdate {
	su.mutation.ResetLastDiv()
	su.mutation.SetLastDiv(i)
	return su
}

// SetNillableLastDiv sets the "last_div" field if the given value is not nil.
func (su *StocksUpdate) SetNillableLastDiv(i *int) *StocksUpdate {
	if i != nil {
		su.SetLastDiv(*i)
	}
	return su
}

// AddLastDiv adds i to the "last_div" field.
func (su *StocksUpdate) AddLastDiv(i int) *StocksUpdate {
	su.mutation.AddLastDiv(i)
	return su
}

// ClearLastDiv clears the value of the "last_div" field.
func (su *StocksUpdate) ClearLastDiv() *StocksUpdate {
	su.mutation.ClearLastDiv()
	return su
}

// SetDescription sets the "description" field.
func (su *StocksUpdate) SetDescription(f float64) *StocksUpdate {
	su.mutation.ResetDescription()
	su.mutation.SetDescription(f)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StocksUpdate) SetNillableDescription(f *float64) *StocksUpdate {
	if f != nil {
		su.SetDescription(*f)
	}
	return su
}

// AddDescription adds f to the "description" field.
func (su *StocksUpdate) AddDescription(f float64) *StocksUpdate {
	su.mutation.AddDescription(f)
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StocksUpdate) ClearDescription() *StocksUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetWebsite sets the "website" field.
func (su *StocksUpdate) SetWebsite(s string) *StocksUpdate {
	su.mutation.SetWebsite(s)
	return su
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (su *StocksUpdate) SetNillableWebsite(s *string) *StocksUpdate {
	if s != nil {
		su.SetWebsite(*s)
	}
	return su
}

// ClearWebsite clears the value of the "website" field.
func (su *StocksUpdate) ClearWebsite() *StocksUpdate {
	su.mutation.ClearWebsite()
	return su
}

// SetYield sets the "yield" field.
func (su *StocksUpdate) SetYield(f float64) *StocksUpdate {
	su.mutation.ResetYield()
	su.mutation.SetYield(f)
	return su
}

// SetNillableYield sets the "yield" field if the given value is not nil.
func (su *StocksUpdate) SetNillableYield(f *float64) *StocksUpdate {
	if f != nil {
		su.SetYield(*f)
	}
	return su
}

// AddYield adds f to the "yield" field.
func (su *StocksUpdate) AddYield(f float64) *StocksUpdate {
	su.mutation.AddYield(f)
	return su
}

// ClearYield clears the value of the "yield" field.
func (su *StocksUpdate) ClearYield() *StocksUpdate {
	su.mutation.ClearYield()
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StocksUpdate) SetCreatedAt(t time.Time) *StocksUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StocksUpdate) SetNillableCreatedAt(t *time.Time) *StocksUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StocksUpdate) SetUpdatedAt(t time.Time) *StocksUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *StocksUpdate) SetNillableUpdatedAt(t *time.Time) *StocksUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// AddStockIDs adds the "stocks" edge to the Stocks entity by IDs.
func (su *StocksUpdate) AddStockIDs(ids ...int) *StocksUpdate {
	su.mutation.AddStockIDs(ids...)
	return su
}

// AddStocks adds the "stocks" edges to the Stocks entity.
func (su *StocksUpdate) AddStocks(s ...*Stocks) *StocksUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStockIDs(ids...)
}

// Mutation returns the StocksMutation object of the builder.
func (su *StocksUpdate) Mutation() *StocksMutation {
	return su.mutation
}

// ClearStocks clears all "stocks" edges to the Stocks entity.
func (su *StocksUpdate) ClearStocks() *StocksUpdate {
	su.mutation.ClearStocks()
	return su
}

// RemoveStockIDs removes the "stocks" edge to Stocks entities by IDs.
func (su *StocksUpdate) RemoveStockIDs(ids ...int) *StocksUpdate {
	su.mutation.RemoveStockIDs(ids...)
	return su
}

// RemoveStocks removes "stocks" edges to Stocks entities.
func (su *StocksUpdate) RemoveStocks(s ...*Stocks) *StocksUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StocksUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StocksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StocksUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StocksUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StocksUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StocksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stocks.Table,
			Columns: stocks.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stocks.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldSymbol,
		})
	}
	if su.mutation.SymbolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldSymbol,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldName,
		})
	}
	if su.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldName,
		})
	}
	if value, ok := su.mutation.NameJa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldNameJa,
		})
	}
	if su.mutation.NameJaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldNameJa,
		})
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldType,
		})
	}
	if su.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldType,
		})
	}
	if value, ok := su.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchange,
		})
	}
	if su.mutation.ExchangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldExchange,
		})
	}
	if value, ok := su.mutation.ExchangeShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchangeShortName,
		})
	}
	if su.mutation.ExchangeShortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldExchangeShortName,
		})
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
	}
	if su.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldPrice,
		})
	}
	if value, ok := su.mutation.Industry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldIndustry,
		})
	}
	if su.mutation.IndustryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldIndustry,
		})
	}
	if value, ok := su.mutation.MarketCarp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
	}
	if value, ok := su.mutation.AddedMarketCarp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
	}
	if su.mutation.MarketCarpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldMarketCarp,
		})
	}
	if value, ok := su.mutation.LastDiv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
	}
	if value, ok := su.mutation.AddedLastDiv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
	}
	if su.mutation.LastDivCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: stocks.FieldLastDiv,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
	}
	if value, ok := su.mutation.AddedDescription(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldDescription,
		})
	}
	if value, ok := su.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldWebsite,
		})
	}
	if su.mutation.WebsiteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldWebsite,
		})
	}
	if value, ok := su.mutation.Yield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
	}
	if value, ok := su.mutation.AddedYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
	}
	if su.mutation.YieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldYield,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldUpdatedAt,
		})
	}
	if su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStocksIDs(); len(nodes) > 0 && !su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StocksUpdateOne is the builder for updating a single Stocks entity.
type StocksUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StocksMutation
}

// SetSymbol sets the "symbol" field.
func (suo *StocksUpdateOne) SetSymbol(s string) *StocksUpdateOne {
	suo.mutation.SetSymbol(s)
	return suo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableSymbol(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetSymbol(*s)
	}
	return suo
}

// ClearSymbol clears the value of the "symbol" field.
func (suo *StocksUpdateOne) ClearSymbol() *StocksUpdateOne {
	suo.mutation.ClearSymbol()
	return suo
}

// SetName sets the "name" field.
func (suo *StocksUpdateOne) SetName(s string) *StocksUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableName(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// ClearName clears the value of the "name" field.
func (suo *StocksUpdateOne) ClearName() *StocksUpdateOne {
	suo.mutation.ClearName()
	return suo
}

// SetNameJa sets the "name_ja" field.
func (suo *StocksUpdateOne) SetNameJa(s string) *StocksUpdateOne {
	suo.mutation.SetNameJa(s)
	return suo
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableNameJa(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetNameJa(*s)
	}
	return suo
}

// ClearNameJa clears the value of the "name_ja" field.
func (suo *StocksUpdateOne) ClearNameJa() *StocksUpdateOne {
	suo.mutation.ClearNameJa()
	return suo
}

// SetType sets the "type" field.
func (suo *StocksUpdateOne) SetType(s string) *StocksUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableType(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// ClearType clears the value of the "type" field.
func (suo *StocksUpdateOne) ClearType() *StocksUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// SetExchange sets the "exchange" field.
func (suo *StocksUpdateOne) SetExchange(s string) *StocksUpdateOne {
	suo.mutation.SetExchange(s)
	return suo
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableExchange(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetExchange(*s)
	}
	return suo
}

// ClearExchange clears the value of the "exchange" field.
func (suo *StocksUpdateOne) ClearExchange() *StocksUpdateOne {
	suo.mutation.ClearExchange()
	return suo
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (suo *StocksUpdateOne) SetExchangeShortName(s string) *StocksUpdateOne {
	suo.mutation.SetExchangeShortName(s)
	return suo
}

// SetNillableExchangeShortName sets the "exchange_short_name" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableExchangeShortName(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetExchangeShortName(*s)
	}
	return suo
}

// ClearExchangeShortName clears the value of the "exchange_short_name" field.
func (suo *StocksUpdateOne) ClearExchangeShortName() *StocksUpdateOne {
	suo.mutation.ClearExchangeShortName()
	return suo
}

// SetPrice sets the "price" field.
func (suo *StocksUpdateOne) SetPrice(f float64) *StocksUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(f)
	return suo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillablePrice(f *float64) *StocksUpdateOne {
	if f != nil {
		suo.SetPrice(*f)
	}
	return suo
}

// AddPrice adds f to the "price" field.
func (suo *StocksUpdateOne) AddPrice(f float64) *StocksUpdateOne {
	suo.mutation.AddPrice(f)
	return suo
}

// ClearPrice clears the value of the "price" field.
func (suo *StocksUpdateOne) ClearPrice() *StocksUpdateOne {
	suo.mutation.ClearPrice()
	return suo
}

// SetIndustry sets the "industry" field.
func (suo *StocksUpdateOne) SetIndustry(s string) *StocksUpdateOne {
	suo.mutation.SetIndustry(s)
	return suo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableIndustry(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetIndustry(*s)
	}
	return suo
}

// ClearIndustry clears the value of the "industry" field.
func (suo *StocksUpdateOne) ClearIndustry() *StocksUpdateOne {
	suo.mutation.ClearIndustry()
	return suo
}

// SetMarketCarp sets the "market_carp" field.
func (suo *StocksUpdateOne) SetMarketCarp(f float64) *StocksUpdateOne {
	suo.mutation.ResetMarketCarp()
	suo.mutation.SetMarketCarp(f)
	return suo
}

// SetNillableMarketCarp sets the "market_carp" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableMarketCarp(f *float64) *StocksUpdateOne {
	if f != nil {
		suo.SetMarketCarp(*f)
	}
	return suo
}

// AddMarketCarp adds f to the "market_carp" field.
func (suo *StocksUpdateOne) AddMarketCarp(f float64) *StocksUpdateOne {
	suo.mutation.AddMarketCarp(f)
	return suo
}

// ClearMarketCarp clears the value of the "market_carp" field.
func (suo *StocksUpdateOne) ClearMarketCarp() *StocksUpdateOne {
	suo.mutation.ClearMarketCarp()
	return suo
}

// SetLastDiv sets the "last_div" field.
func (suo *StocksUpdateOne) SetLastDiv(i int) *StocksUpdateOne {
	suo.mutation.ResetLastDiv()
	suo.mutation.SetLastDiv(i)
	return suo
}

// SetNillableLastDiv sets the "last_div" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableLastDiv(i *int) *StocksUpdateOne {
	if i != nil {
		suo.SetLastDiv(*i)
	}
	return suo
}

// AddLastDiv adds i to the "last_div" field.
func (suo *StocksUpdateOne) AddLastDiv(i int) *StocksUpdateOne {
	suo.mutation.AddLastDiv(i)
	return suo
}

// ClearLastDiv clears the value of the "last_div" field.
func (suo *StocksUpdateOne) ClearLastDiv() *StocksUpdateOne {
	suo.mutation.ClearLastDiv()
	return suo
}

// SetDescription sets the "description" field.
func (suo *StocksUpdateOne) SetDescription(f float64) *StocksUpdateOne {
	suo.mutation.ResetDescription()
	suo.mutation.SetDescription(f)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableDescription(f *float64) *StocksUpdateOne {
	if f != nil {
		suo.SetDescription(*f)
	}
	return suo
}

// AddDescription adds f to the "description" field.
func (suo *StocksUpdateOne) AddDescription(f float64) *StocksUpdateOne {
	suo.mutation.AddDescription(f)
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StocksUpdateOne) ClearDescription() *StocksUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetWebsite sets the "website" field.
func (suo *StocksUpdateOne) SetWebsite(s string) *StocksUpdateOne {
	suo.mutation.SetWebsite(s)
	return suo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableWebsite(s *string) *StocksUpdateOne {
	if s != nil {
		suo.SetWebsite(*s)
	}
	return suo
}

// ClearWebsite clears the value of the "website" field.
func (suo *StocksUpdateOne) ClearWebsite() *StocksUpdateOne {
	suo.mutation.ClearWebsite()
	return suo
}

// SetYield sets the "yield" field.
func (suo *StocksUpdateOne) SetYield(f float64) *StocksUpdateOne {
	suo.mutation.ResetYield()
	suo.mutation.SetYield(f)
	return suo
}

// SetNillableYield sets the "yield" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableYield(f *float64) *StocksUpdateOne {
	if f != nil {
		suo.SetYield(*f)
	}
	return suo
}

// AddYield adds f to the "yield" field.
func (suo *StocksUpdateOne) AddYield(f float64) *StocksUpdateOne {
	suo.mutation.AddYield(f)
	return suo
}

// ClearYield clears the value of the "yield" field.
func (suo *StocksUpdateOne) ClearYield() *StocksUpdateOne {
	suo.mutation.ClearYield()
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StocksUpdateOne) SetCreatedAt(t time.Time) *StocksUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableCreatedAt(t *time.Time) *StocksUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StocksUpdateOne) SetUpdatedAt(t time.Time) *StocksUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *StocksUpdateOne) SetNillableUpdatedAt(t *time.Time) *StocksUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// AddStockIDs adds the "stocks" edge to the Stocks entity by IDs.
func (suo *StocksUpdateOne) AddStockIDs(ids ...int) *StocksUpdateOne {
	suo.mutation.AddStockIDs(ids...)
	return suo
}

// AddStocks adds the "stocks" edges to the Stocks entity.
func (suo *StocksUpdateOne) AddStocks(s ...*Stocks) *StocksUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStockIDs(ids...)
}

// Mutation returns the StocksMutation object of the builder.
func (suo *StocksUpdateOne) Mutation() *StocksMutation {
	return suo.mutation
}

// ClearStocks clears all "stocks" edges to the Stocks entity.
func (suo *StocksUpdateOne) ClearStocks() *StocksUpdateOne {
	suo.mutation.ClearStocks()
	return suo
}

// RemoveStockIDs removes the "stocks" edge to Stocks entities by IDs.
func (suo *StocksUpdateOne) RemoveStockIDs(ids ...int) *StocksUpdateOne {
	suo.mutation.RemoveStockIDs(ids...)
	return suo
}

// RemoveStocks removes "stocks" edges to Stocks entities.
func (suo *StocksUpdateOne) RemoveStocks(s ...*Stocks) *StocksUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStockIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StocksUpdateOne) Select(field string, fields ...string) *StocksUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stocks entity.
func (suo *StocksUpdateOne) Save(ctx context.Context) (*Stocks, error) {
	var (
		err  error
		node *Stocks
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StocksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StocksUpdateOne) SaveX(ctx context.Context) *Stocks {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StocksUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StocksUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StocksUpdateOne) sqlSave(ctx context.Context) (_node *Stocks, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stocks.Table,
			Columns: stocks.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stocks.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stocks.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stocks.FieldID)
		for _, f := range fields {
			if !stocks.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stocks.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldSymbol,
		})
	}
	if suo.mutation.SymbolCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldSymbol,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldName,
		})
	}
	if suo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldName,
		})
	}
	if value, ok := suo.mutation.NameJa(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldNameJa,
		})
	}
	if suo.mutation.NameJaCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldNameJa,
		})
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldType,
		})
	}
	if suo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldType,
		})
	}
	if value, ok := suo.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchange,
		})
	}
	if suo.mutation.ExchangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldExchange,
		})
	}
	if value, ok := suo.mutation.ExchangeShortName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchangeShortName,
		})
	}
	if suo.mutation.ExchangeShortNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldExchangeShortName,
		})
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
	}
	if suo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldPrice,
		})
	}
	if value, ok := suo.mutation.Industry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldIndustry,
		})
	}
	if suo.mutation.IndustryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldIndustry,
		})
	}
	if value, ok := suo.mutation.MarketCarp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
	}
	if value, ok := suo.mutation.AddedMarketCarp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
	}
	if suo.mutation.MarketCarpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldMarketCarp,
		})
	}
	if value, ok := suo.mutation.LastDiv(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
	}
	if value, ok := suo.mutation.AddedLastDiv(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
	}
	if suo.mutation.LastDivCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: stocks.FieldLastDiv,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
	}
	if value, ok := suo.mutation.AddedDescription(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldWebsite,
		})
	}
	if suo.mutation.WebsiteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stocks.FieldWebsite,
		})
	}
	if value, ok := suo.mutation.Yield(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
	}
	if value, ok := suo.mutation.AddedYield(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
	}
	if suo.mutation.YieldCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stocks.FieldYield,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldUpdatedAt,
		})
	}
	if suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stocks{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
