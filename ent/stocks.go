// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gushikem01/usa-kabu-go/ent/stocks"
)

// Stocks is the model entity for the Stocks schema.
type Stocks struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NameJa holds the value of the "name_ja" field.
	NameJa string `json:"name_ja,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Exchange holds the value of the "exchange" field.
	Exchange string `json:"exchange,omitempty"`
	// ExchangeShortName holds the value of the "exchange_short_name" field.
	ExchangeShortName string `json:"exchange_short_name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StocksQuery when eager-loading is set.
	Edges StocksEdges `json:"edges"`
}

// StocksEdges holds the relations/edges for other nodes in the graph.
type StocksEdges struct {
	// Stocks holds the value of the stocks edge.
	Stocks []*Stocks `json:"stocks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StocksOrErr returns the Stocks value or an error if the edge
// was not loaded in eager-loading.
func (e StocksEdges) StocksOrErr() ([]*Stocks, error) {
	if e.loadedTypes[0] {
		return e.Stocks, nil
	}
	return nil, &NotLoadedError{edge: "stocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stocks) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stocks.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case stocks.FieldID:
			values[i] = new(sql.NullInt64)
		case stocks.FieldSymbol, stocks.FieldName, stocks.FieldNameJa, stocks.FieldType, stocks.FieldExchange, stocks.FieldExchangeShortName:
			values[i] = new(sql.NullString)
		case stocks.FieldCreatedAt, stocks.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stocks", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stocks fields.
func (s *Stocks) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stocks.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stocks.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				s.Symbol = value.String
			}
		case stocks.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stocks.FieldNameJa:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_ja", values[i])
			} else if value.Valid {
				s.NameJa = value.String
			}
		case stocks.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case stocks.FieldExchange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange", values[i])
			} else if value.Valid {
				s.Exchange = value.String
			}
		case stocks.FieldExchangeShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_short_name", values[i])
			} else if value.Valid {
				s.ExchangeShortName = value.String
			}
		case stocks.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				s.Price = value.Float64
			}
		case stocks.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case stocks.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryStocks queries the "stocks" edge of the Stocks entity.
func (s *Stocks) QueryStocks() *StocksQuery {
	return (&StocksClient{config: s.config}).QueryStocks(s)
}

// Update returns a builder for updating this Stocks.
// Note that you need to call Stocks.Unwrap() before calling this method if this Stocks
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stocks) Update() *StocksUpdateOne {
	return (&StocksClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stocks entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stocks) Unwrap() *Stocks {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stocks is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stocks) String() string {
	var builder strings.Builder
	builder.WriteString("Stocks(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", symbol=")
	builder.WriteString(s.Symbol)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", name_ja=")
	builder.WriteString(s.NameJa)
	builder.WriteString(", type=")
	builder.WriteString(s.Type)
	builder.WriteString(", exchange=")
	builder.WriteString(s.Exchange)
	builder.WriteString(", exchange_short_name=")
	builder.WriteString(s.ExchangeShortName)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StocksSlice is a parsable slice of Stocks.
type StocksSlice []*Stocks

func (s StocksSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
