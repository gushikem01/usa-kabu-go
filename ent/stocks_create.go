// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gushikem01/usa-kabu-go/ent/stocks"
)

// StocksCreate is the builder for creating a Stocks entity.
type StocksCreate struct {
	config
	mutation *StocksMutation
	hooks    []Hook
}

// SetSymbol sets the "symbol" field.
func (sc *StocksCreate) SetSymbol(s string) *StocksCreate {
	sc.mutation.SetSymbol(s)
	return sc
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (sc *StocksCreate) SetNillableSymbol(s *string) *StocksCreate {
	if s != nil {
		sc.SetSymbol(*s)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StocksCreate) SetName(s string) *StocksCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *StocksCreate) SetNillableName(s *string) *StocksCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetNameJa sets the "name_ja" field.
func (sc *StocksCreate) SetNameJa(s string) *StocksCreate {
	sc.mutation.SetNameJa(s)
	return sc
}

// SetNillableNameJa sets the "name_ja" field if the given value is not nil.
func (sc *StocksCreate) SetNillableNameJa(s *string) *StocksCreate {
	if s != nil {
		sc.SetNameJa(*s)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *StocksCreate) SetType(s string) *StocksCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *StocksCreate) SetNillableType(s *string) *StocksCreate {
	if s != nil {
		sc.SetType(*s)
	}
	return sc
}

// SetExchange sets the "exchange" field.
func (sc *StocksCreate) SetExchange(s string) *StocksCreate {
	sc.mutation.SetExchange(s)
	return sc
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sc *StocksCreate) SetNillableExchange(s *string) *StocksCreate {
	if s != nil {
		sc.SetExchange(*s)
	}
	return sc
}

// SetExchangeShortName sets the "exchange_short_name" field.
func (sc *StocksCreate) SetExchangeShortName(s string) *StocksCreate {
	sc.mutation.SetExchangeShortName(s)
	return sc
}

// SetNillableExchangeShortName sets the "exchange_short_name" field if the given value is not nil.
func (sc *StocksCreate) SetNillableExchangeShortName(s *string) *StocksCreate {
	if s != nil {
		sc.SetExchangeShortName(*s)
	}
	return sc
}

// SetPrice sets the "price" field.
func (sc *StocksCreate) SetPrice(f float64) *StocksCreate {
	sc.mutation.SetPrice(f)
	return sc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (sc *StocksCreate) SetNillablePrice(f *float64) *StocksCreate {
	if f != nil {
		sc.SetPrice(*f)
	}
	return sc
}

// SetIndustry sets the "industry" field.
func (sc *StocksCreate) SetIndustry(s string) *StocksCreate {
	sc.mutation.SetIndustry(s)
	return sc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (sc *StocksCreate) SetNillableIndustry(s *string) *StocksCreate {
	if s != nil {
		sc.SetIndustry(*s)
	}
	return sc
}

// SetMarketCarp sets the "market_carp" field.
func (sc *StocksCreate) SetMarketCarp(f float64) *StocksCreate {
	sc.mutation.SetMarketCarp(f)
	return sc
}

// SetNillableMarketCarp sets the "market_carp" field if the given value is not nil.
func (sc *StocksCreate) SetNillableMarketCarp(f *float64) *StocksCreate {
	if f != nil {
		sc.SetMarketCarp(*f)
	}
	return sc
}

// SetLastDiv sets the "last_div" field.
func (sc *StocksCreate) SetLastDiv(i int) *StocksCreate {
	sc.mutation.SetLastDiv(i)
	return sc
}

// SetNillableLastDiv sets the "last_div" field if the given value is not nil.
func (sc *StocksCreate) SetNillableLastDiv(i *int) *StocksCreate {
	if i != nil {
		sc.SetLastDiv(*i)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *StocksCreate) SetDescription(f float64) *StocksCreate {
	sc.mutation.SetDescription(f)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StocksCreate) SetNillableDescription(f *float64) *StocksCreate {
	if f != nil {
		sc.SetDescription(*f)
	}
	return sc
}

// SetYield sets the "yield" field.
func (sc *StocksCreate) SetYield(f float64) *StocksCreate {
	sc.mutation.SetYield(f)
	return sc
}

// SetNillableYield sets the "yield" field if the given value is not nil.
func (sc *StocksCreate) SetNillableYield(f *float64) *StocksCreate {
	if f != nil {
		sc.SetYield(*f)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StocksCreate) SetCreatedAt(t time.Time) *StocksCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StocksCreate) SetNillableCreatedAt(t *time.Time) *StocksCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StocksCreate) SetUpdatedAt(t time.Time) *StocksCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StocksCreate) SetNillableUpdatedAt(t *time.Time) *StocksCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// AddStockIDs adds the "stocks" edge to the Stocks entity by IDs.
func (sc *StocksCreate) AddStockIDs(ids ...int) *StocksCreate {
	sc.mutation.AddStockIDs(ids...)
	return sc
}

// AddStocks adds the "stocks" edges to the Stocks entity.
func (sc *StocksCreate) AddStocks(s ...*Stocks) *StocksCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddStockIDs(ids...)
}

// Mutation returns the StocksMutation object of the builder.
func (sc *StocksCreate) Mutation() *StocksMutation {
	return sc.mutation
}

// Save creates the Stocks in the database.
func (sc *StocksCreate) Save(ctx context.Context) (*Stocks, error) {
	var (
		err  error
		node *Stocks
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StocksMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StocksCreate) SaveX(ctx context.Context) *Stocks {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StocksCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StocksCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StocksCreate) defaults() {
	if _, ok := sc.mutation.Price(); !ok {
		v := stocks.DefaultPrice
		sc.mutation.SetPrice(v)
	}
	if _, ok := sc.mutation.MarketCarp(); !ok {
		v := stocks.DefaultMarketCarp
		sc.mutation.SetMarketCarp(v)
	}
	if _, ok := sc.mutation.LastDiv(); !ok {
		v := stocks.DefaultLastDiv
		sc.mutation.SetLastDiv(v)
	}
	if _, ok := sc.mutation.Yield(); !ok {
		v := stocks.DefaultYield
		sc.mutation.SetYield(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := stocks.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := stocks.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StocksCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Stocks.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Stocks.updated_at"`)}
	}
	return nil
}

func (sc *StocksCreate) sqlSave(ctx context.Context) (*Stocks, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *StocksCreate) createSpec() (*Stocks, *sqlgraph.CreateSpec) {
	var (
		_node = &Stocks{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stocks.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stocks.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.NameJa(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldNameJa,
		})
		_node.NameJa = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sc.mutation.Exchange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchange,
		})
		_node.Exchange = value
	}
	if value, ok := sc.mutation.ExchangeShortName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldExchangeShortName,
		})
		_node.ExchangeShortName = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := sc.mutation.Industry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stocks.FieldIndustry,
		})
		_node.Industry = value
	}
	if value, ok := sc.mutation.MarketCarp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldMarketCarp,
		})
		_node.MarketCarp = value
	}
	if value, ok := sc.mutation.LastDiv(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stocks.FieldLastDiv,
		})
		_node.LastDiv = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Yield(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stocks.FieldYield,
		})
		_node.Yield = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stocks.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   stocks.StocksTable,
			Columns: stocks.StocksPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: stocks.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StocksCreateBulk is the builder for creating many Stocks entities in bulk.
type StocksCreateBulk struct {
	config
	builders []*StocksCreate
}

// Save creates the Stocks entities in the database.
func (scb *StocksCreateBulk) Save(ctx context.Context) ([]*Stocks, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stocks, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StocksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StocksCreateBulk) SaveX(ctx context.Context) []*Stocks {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StocksCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StocksCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
